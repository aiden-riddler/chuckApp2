{"version":3,"sources":["QueryJoke.js","App.js","reportWebVitals.js","index.js"],"names":["QueryJoke","joke","App","useState","randomJoke","setRandomJoke","search","setSearch","query","setQuery","queryJokes","setQueryJokes","categories","setCategories","catJoke","setCatJoke","useEffect","getRandomJoke","getCategories","getQueryJoke","a","fetch","rJoke","json","rData","console","log","value","axios","get","cJoke","data","qJoke","qData","jokes","result","length","i","push","getCategory","selectBox","document","getElementById","category","options","selectedIndex","categoryJokes","for","id","onChange","map","className","onSubmit","e","preventDefault","type","target","queryJoke","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"sPAUeA,EARG,SAAC,GAAY,IAAXC,EAAU,EAAVA,KAChB,OACG,8BACI,4BAAIA,O,gBCqGAC,G,MArGJ,WAAO,IAAD,EAEoBC,mBAAS,IAF7B,mBAERC,EAFQ,KAEGC,EAFH,OAGYF,mBAAS,KAHrB,mBAGRG,EAHQ,KAGDC,EAHC,OAIUJ,qBAJV,mBAIRK,EAJQ,KAIFC,EAJE,OAKoBN,mBAAS,IAL7B,mBAKRO,EALQ,KAKGC,EALH,OAMoBR,mBAAS,IAN7B,mBAMRS,EANQ,KAMGC,EANH,OAOcV,qBAPd,mBAORW,EAPQ,KAOAC,EAPA,KAUfC,qBAAU,WACRC,IACAC,MACA,IAEFF,qBAAU,WACRG,MACA,CAACX,IAGH,IAAMS,EAAa,uCAAG,8BAAAG,EAAA,sEACAC,MAAM,2CADN,cACdC,EADc,gBAEAA,EAAMC,OAFN,OAEdC,EAFc,OAGpBC,QAAQC,IAAIF,EAAMG,OAClBtB,EAAcmB,EAAMG,OAJA,2CAAH,qDAObT,EAAa,uCAAG,4BAAAE,EAAA,sEACAQ,IAAMC,IAAN,+CADA,OACdC,EADc,OAEpBjB,EAAciB,EAAMC,MAFA,2CAAH,qDAKbZ,EAAY,uCAAG,kCAAAC,EAAA,sEACCC,MAAM,iDAAD,OAAkDb,IADxD,cACbwB,EADa,gBAECA,EAAMT,OAFP,OAOnB,IALMU,EAFa,OAGnBR,QAAQC,IAAIO,GACRC,EAAQ,GACZT,QAAQC,IAAIO,EAAME,OAAOC,QAEhBC,EAAE,EAAGA,EAAEJ,EAAME,OAAOC,OAAOC,IAClCH,EAAMI,KAAKL,EAAME,OAAOE,GAAGV,OAE7BhB,EAAcuB,GAVK,4CAAH,qDAuBZK,EAAW,uCAAG,gCAAAnB,EAAA,6DACdoB,EAAYC,SAASC,eAAe,cACpCC,EAAWH,EAAUI,QAAQJ,EAAUK,eAAelB,MAC1DF,QAAQC,IAAIiB,GAHM,SAIUf,IAAMC,IAAN,2DAA8Dc,IAJxE,OAIZG,EAJY,OAKlBrB,QAAQC,IAAIoB,EAAcf,MAC1BhB,EAAW+B,EAAcf,KAAKJ,OANZ,2CAAH,qDASjB,OACE,gCACE,oDAEA,uBAAOoB,IAAM,aAAb,wBAEN,wBAAQC,GAAK,aAAaC,SAAUV,EAApC,SACG3B,EAAWsC,KAAI,SAAAP,GAAQ,OACtB,wBAA0BhB,MAAOgB,EAAjC,SAA4CA,GAA/BA,EAASK,SAIpB,qBAAKG,UAAY,gBAAjB,SAEN,uBAAMC,SA5Bc,SAAAC,GAChBA,EAAEC,iBACF7C,EAASH,IA2Bb6C,UAAY,cADZ,UAEE,uBAAOA,UAAY,aAAaI,KAAK,OAAO5B,MAAOrB,EACnD2C,SAnCqB,SAAAI,GACnB9C,EAAU8C,EAAEG,OAAO7B,UAmCrB,wBAAQwB,UAAY,gBAAgBI,KAAM,SAA1C,8BAOF,4BAAInD,IACJ,mBAAG+C,UAAU,OAAb,SAAqBrC,IAEpBJ,EAAWwC,KAAI,SAACO,GAAD,OACd,cAAC,EAAD,CAAWxD,KAAQwD,YCtFNC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF5B,SAASC,eAAe,SAM1BgB,M","file":"static/js/main.ab93b450.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst QueryJoke = ({joke}) => {\r\n    return(\r\n       <div>\r\n           <p>{joke}</p>\r\n       </div> \r\n    );\r\n}\r\n\r\nexport default QueryJoke;","import React, {useEffect,useState } from 'react';\nimport QueryJoke from \"./QueryJoke\";\nimport axios from 'axios';\nimport './App.css';\n\nconst App =() => {\n\n  const [randomJoke,setRandomJoke] = useState([]);\n  const [search,setSearch] = useState(' ');\n  const [query,setQuery] = useState();\n  const [queryJokes,setQueryJokes] = useState([]);\n  const [categories,setCategories] = useState([]);\n  const [catJoke,setCatJoke] = useState();\n\n\n  useEffect(() => {\n    getRandomJoke();\n    getCategories();\n  },[]);\n\n  useEffect(() => {\n    getQueryJoke();\n  },[query]);\n\n\n  const getRandomJoke = async () => {\n    const rJoke = await fetch(`https://api.chucknorris.io/jokes/random`);\n    const rData = await rJoke.json();\n    console.log(rData.value);\n    setRandomJoke(rData.value);\n  }\n\n  const getCategories = async () => {\n    const cJoke = await axios.get(`https://api.chucknorris.io/jokes/categories`);\n    setCategories(cJoke.data);\n  }\n\n  const getQueryJoke = async () => {\n    const qJoke = await fetch(`https://api.chucknorris.io/jokes/search?query=${query}`);\n    const qData = await qJoke.json();\n    console.log(qData);\n    let jokes = []\n    console.log(qData.result.length);\n\n    for (let i=0; i<qData.result.length;i++){\n      jokes.push(qData.result[i].value);\n    }\n    setQueryJokes(jokes);\n  }\n\n\n  const updateSearch = e => {\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e =>{\n    e.preventDefault();\n    setQuery(search);\n  }\n\n  const getCategory = async () => {\n    var selectBox = document.getElementById(\"select-box\");\n    var category = selectBox.options[selectBox.selectedIndex].value;\n    console.log(category);\n    const categoryJokes = await axios.get(`https://api.chucknorris.io/jokes/random?category=${category}`);\n    console.log(categoryJokes.data);\n    setCatJoke(categoryJokes.data.value);\n  }\n\n  return(\n    <div>\n      <h1>Chuck Norris Jokes</h1>\n\n      <label for = \"categories\">Categories</label>\n\n<select id = \"select-box\" onChange={getCategory}>\n  {categories.map(category => (\n    <option key={category.id} value={category}>{category}</option>\n  ))}\n\n</select>\n      <div className = \"formContainer\" >\n\n<form onSubmit ={getSearch} \nclassName = \"search-form\">\n  <input className = \"search-bar\" type=\"text\" value={search}\n  onChange = {updateSearch}/>\n  <button className = \"search-button\" type =\"submit\">\n    Search Joke\n  </button>\n</form>\n\n</div> \n\n<p>{randomJoke}</p>\n<p className=\"para\">{catJoke}</p>\n\n{queryJokes.map((queryJoke) => (\n  <QueryJoke joke = {queryJoke}/>\n \n))}\n\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}